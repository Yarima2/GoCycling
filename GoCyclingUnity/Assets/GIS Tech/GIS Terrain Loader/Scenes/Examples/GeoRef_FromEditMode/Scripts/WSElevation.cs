using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using GISTech.GISTerrainLoader;
using System;

/// This Example show how to load coordintes from terrain Generated or modified in edit mode
///  Get GameObject Rea world position + Elevation in [m]
///  Set and Convert Real World position to unity world space + using diffrent elevation modes 
public class WSElevation : MonoBehaviour
{
    // Load Geo-Data and Get Lat-Lon from Unity World Space
    public GameObject Player;
    // if you are using a terrain generated in edit mode use TerrainOriginMode.FromEditor
    public TerrainOriginMode OriginProjectionMode = TerrainOriginMode.FromEditor;
    //Get Elevation Mode (Check docs)
    public RealWorldElevation ElevationMode = RealWorldElevation.Altitude;


    private GISTerrainLoaderRuntimePrefs prefs;
    private TerrainContainerObject container;

    [Space(10)]
    // Set GameObject Position by converting Lat-Lon Position to Unity World Space Positon 
    public DVector2 LatLonPos = new DVector2(2.72289517819244, 33.8634254169107);
    public SetElevationMode elevationMode = SetElevationMode.RelativeToSeaLevel;
    public float StartElevation = 1500;


    // Start is called before the first frame update
    void Start()
    {
        prefs = GISTerrainLoaderRuntimePrefs.Get;

        RuntimeTerrainGenerator.SendTerrainOrigin += UpdateOrigin;

        if (OriginProjectionMode == TerrainOriginMode.FromEditor)
        {
            container = GameObject.FindObjectOfType<TerrainContainerObject>();

            if (container)
            {
                //Note that the last terrain generated in edit mode must be the terrain which we are trying to load 
                //Customization : GTL will Deserialize HeightMap generated by Editor GTL which located in GIS Tech\GIS Terrain Loader\Resources\HeightmapData folder 
                //So if you want to manually rename it from editor and tell GTL which file to load, use "container.GetStoredHeightmap(" NewHeightMapName ");
                //Using the previous API will define to GTL which Heightmap will be deserialized using the current script 
                RuntimeTerrainGenerator.Get.SetGeneratedTerrain(container);
                container.GetStoredHeightmap("File_Data_Example");
            }

        }

    }
    private void UpdateOrigin(DVector2 origin, float minelevation, float maxelevation)
    {
        GeoRefConversion.SetLocalOrigin(origin);
    }

    // Update is called once per frame
    void Update()
    {
        if(Input.GetKeyDown(KeyCode.G))
        {
            var RWPosition = GetObjectLatLonElevation(); 
            Debug.Log("Lat/Lon: "+ RWPosition.x+" " +RWPosition.y+ "  Elevation :" + RWPosition.z);
        }

        if (Input.GetKeyDown(KeyCode.S))
        {
            Player.transform.position = GeoRefConversion.SetRealWorldPosition(container, LatLonPos, StartElevation, elevationMode);

        }
    }

    /// <summary>
    /// Get the real world Elevation of an object
    /// </summary>
    /// <returns></returns>
    public DVector3 GetObjectLatLonElevation()
    {
        var LatLonPos = GeoRefConversion.UnityWorldSpaceToLatLog(Player.transform.position, container);

        var elevatqion = GeoRefConversion.GetRealWorldElevation(container, Player.transform.position,ElevationMode);
        return new DVector3(LatLonPos.x, LatLonPos.y, Math.Round(GeoRefConversion.GetRealWorldElevation(container, LatLonPos), 2));
    }
}
