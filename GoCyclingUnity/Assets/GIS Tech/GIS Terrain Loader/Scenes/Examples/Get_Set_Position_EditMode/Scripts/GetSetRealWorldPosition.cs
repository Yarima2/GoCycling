using GISTech.GISTerrainLoader;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[ExecuteInEditMode]
public class GetSetRealWorldPosition : MonoBehaviour
{
    // Load Geo-Data and Get Lat-Lon from Unity World Space
    public GameObject Player;
    // if you are using a terrain generated in edit mode use TerrainOriginMode.FromEditor
    public TerrainOriginMode OriginProjectionMode = TerrainOriginMode.FromEditor;
    //Get Elevation Mode (Check docs)
    public RealWorldElevation ElevationMode = RealWorldElevation.Altitude;
 
    private TerrainContainerObject container;

    [Space(10)]
    // Set GameObject Position by converting Lat-Lon Position to Unity World Space Positon 
    public DVector2 LatLonPos = new DVector2(2.72289517819244, 33.8634254169107);
    public SetElevationMode elevationMode = SetElevationMode.RelativeToSeaLevel;
    public float StartElevation = 1500;


    // Start is called before the first frame update
    public void GetTerrainData()
    {
        container = GameObject.FindObjectOfType<TerrainContainerObject>();

        if (container)
        {
            //Note that the last terrain generated in edit mode must be the terrain which we are trying to load 
            //Customization : GTL will Deserialize HeightMap generated by Editor GTL which located in GIS Tech\GIS Terrain Loader\Resources\HeightmapData folder 
            //So if you want to manually rename it from editor and tell GTL which file to load, use "container.GetStoredHeightmap(" NewHeightMapName ");
            //Using the previous API will define to GTL which Heightmap will be deserialized using the current script 
            container.GetStoredHeightmap("File_Data_Example");
        }

        GeoRefConversion.SetLocalOrigin(container.data.DownLeftPoint);
 
    }

    public void GetPosition()
    {
        var RWPosition = GetObjectLatLonElevation();
        Debug.Log("Lat/Lon: " + RWPosition.x + " " + RWPosition.y + "  Elevation :" + RWPosition.z);

    }
    public void SetPosition()
    {
        Player.transform.position = GeoRefConversion.SetRealWorldPosition(container, LatLonPos, StartElevation, elevationMode);
    }
     /// <summary>
    /// Get the real world Elevation of an object
    /// </summary>
    /// <returns></returns>
    public DVector3 GetObjectLatLonElevation()
    {
        if (container == null)
            container = GameObject.FindObjectOfType<TerrainContainerObject>();

        var LatLonPos = GeoRefConversion.UnityWorldSpaceToLatLog(Player.transform.position, container);
        var elevation = Math.Round(GeoRefConversion.GetRealWorldElevation(container, LatLonPos));
        return new DVector3(LatLonPos.x, LatLonPos.y, elevation);
    }
}
